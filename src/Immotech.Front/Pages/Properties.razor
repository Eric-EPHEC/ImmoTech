@page "/properties"

@using Immotech.Front.Models
@using System.Linq
@using System.Net.Http.Json
@using Blazored.Toast.Services
@using Immotech.Front.Components
@inject HttpClient Http
@inject IToastService Toast
@inject NavigationManager Nav

<PageTitle>Properties</PageTitle>

@* List all properties with delete using ConfirmDialog + LoadingOverlay (Pico CSS) *@
<LoadingOverlay IsLoading="@isBusy" />
<ConfirmDialog @ref="confirmDeleteDlg" Title="Supprimer" Message="Supprimer ce bien ?" Closed="OnDeleteConfirmed" />

<h2 class="mb-3">Liste des biens</h2>

@if(isBusy && properties is null)
{
    <!-- data loading handled by overlay -->
}
else if (properties is null || !properties.Any())
{
    <p>Aucun bien trouvé.</p>
}
else
{
    <div class="grid">
        @foreach (var property in properties)
        {
            <article>
                <img src="@(GetMainPhoto(property) ?? "images/placeholders/house-placeholder.jpg")" style="width:100%;aspect-ratio:16/9;object-fit:cover;" />
                <header style="display:flex;justify-content:space-between;align-items:center;">
                    <h3 style="margin:0;">@property.Title</h3>
                    @if (!string.IsNullOrWhiteSpace(property.Agency?.LogoUrl))
                    {
                        <img src="@property.Agency!.LogoUrl" alt="Logo agence" style="height:32px;" />
                    }
                </header>
                <p class="text-muted">@property.Address.ZipCode @property.Address.City</p>
                <p><strong>@property.Price.ToString("C0")</strong></p>
                <p>@property.Bedrooms chambre(s) · @property.SurfaceArea m²</p>
                <footer style="display:flex;justify-content:flex-end;gap:0.5rem;">
                    <button class="secondary" @onclick="() => NavigateToDetails(property.Id)">Détails</button>
                    <button class="contrast" @onclick="() => PromptDelete(property.Id)">Supprimer</button>
                </footer>
            </article>
        }
    </div>
}

@code {
    private List<Property>? properties;
    private bool isBusy;
    private Guid _deleteId;
    private ConfirmDialog? confirmDeleteDlg;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        try
        {
            isBusy = true;
            // get list from API
            var response = await Http.GetFromJsonAsync<PropertyListResponse>("property");
            properties = response?.Properties ?? new List<Property>();
        }
        catch(Exception ex)
        {
            Toast.ShowError($"Erreur chargement: {ex.Message}");
        }
        finally
        {
            isBusy = false;
        }
    }

    private void NavigateToDetails(Guid id)
    {
        Nav.NavigateTo($"/properties/{id}");
    }

    private void PromptDelete(Guid id)
    {
        _deleteId = id;
        confirmDeleteDlg?.Show();
    }

    private async Task OnDeleteConfirmed(bool confirmed)
    {
        if (!confirmed) return;

        try
        {
            isBusy = true;
            await Http.DeleteAsync($"property/{_deleteId}");
            properties?.RemoveAll(p => p.Id == _deleteId);
            Toast.ShowSuccess("Bien supprimé");
        }
        catch(Exception ex)
        {
            Toast.ShowError($"Erreur suppression: {ex.Message}");
        }
        finally
        {
            isBusy = false;
        }
    }

    private static string? GetMainPhoto(Property prop)
    {
        return prop.Photos?.FirstOrDefault(p => p.IsMain)?.Url ?? prop.Photos?.FirstOrDefault()?.Url;
    }
} 