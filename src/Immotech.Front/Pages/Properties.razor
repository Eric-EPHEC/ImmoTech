@page "/properties"

@using Immotech.Front.Models
@using System.Linq
@using System.Net.Http.Json
@using Blazored.Toast.Services
@using Immotech.Front.Components
@inject HttpClient Http
@inject IToastService Toast
@inject NavigationManager Nav

<PageTitle>Properties</PageTitle>

@* List all properties with delete using ConfirmDialog + LoadingOverlay (Pico CSS) *@
<LoadingOverlay IsLoading="@isBusy" />
<ConfirmDialog @ref="confirmDeleteDlg" Title="Supprimer" Message="Supprimer ce bien ?" Closed="OnDeleteConfirmed" />

<div class="container mx-auto">
    <h2 class="mb-3">Liste des biens</h2>

    @if(isBusy && properties is null)
    {
        <!-- data loading handled by overlay -->
    }
    else if (properties is null || !properties.Any())
    {
        <p>Aucun bien trouvé.</p>
    }
    else
    {
        @* Filter bar *@
        <details open class="mb-4">
            <summary>Filtres</summary>
            <div class="grid" style="grid-template-columns: repeat(auto-fill,minmax(140px,1fr));gap:0.5rem; margin-top:0.5rem;">
                <input placeholder="Prix min"    type="number" value="@minPrice?.ToString()" @oninput="e => { minPrice = string.IsNullOrWhiteSpace(e.Value?.ToString()) ? null : decimal.Parse(e.Value!.ToString()!); OnFilterChanged(); }" />
                <input placeholder="Prix max"    type="number" value="@maxPrice?.ToString()" @oninput="e => { maxPrice = string.IsNullOrWhiteSpace(e.Value?.ToString()) ? null : decimal.Parse(e.Value!.ToString()!); OnFilterChanged(); }" />
                <input placeholder="Chambres"    type="number" value="@minBedrooms" @oninput="e => { minBedrooms = string.IsNullOrWhiteSpace(e.Value?.ToString()) ? null : int.Parse(e.Value!.ToString()!); OnFilterChanged(); }" />
                <select value="@propertyType" @onchange="e => { propertyType = string.IsNullOrWhiteSpace(e.Value?.ToString()) ? null : e.Value.ToString(); OnFilterChanged(); }">
                    <option value="">--Type de bien--</option>
                    <option value="Maison">Maison</option>
                    <option value="Appartement">Appartement</option>
                    <option value="Studio">Studio</option>
                    <option value="Terrain">Terrain</option>
                </select>
                <select value="@status" @onchange="e => { status = string.IsNullOrWhiteSpace(e.Value?.ToString()) ? null : Enum.Parse<PropertyStatus>(e.Value!.ToString()!); OnFilterChanged(); }">
                    <option value="">--Statut--</option>
                    @foreach(var st in Enum.GetValues<PropertyStatus>())
                    {
                        <option value="@st" selected="@(status==st)">@st</option>
                    }
                </select>
                <input placeholder="Localisation" value="@locationText" @oninput="e => { locationText = e.Value?.ToString(); OnFilterChanged(); }" />
            </div>
        </details>

        @* List of properties *@
        <div class="flex flex-col gap-4">
            @foreach (var property in properties)
            {
                <article class="prop-row">
                    <img src="@(GetMainPhoto(property) ?? "images/placeholders/house-placeholder.jpg")"
                         class="w-[180px] h-[135px] object-cover rounded" />

                    <section class="flex-1 flex flex-col gap-1">
                        <header class="flex justify-between">
                            <strong>@property.Title</strong>
                            @if (!string.IsNullOrWhiteSpace(property.Agency?.LogoUrl))
                            {
                                <img src="@property.Agency!.LogoUrl" class="h-8" />
                            }
                        </header>

                        <span>@property.Price.ToString("C0") · @property.Bedrooms ch · @property.SurfaceArea m²</span>
                        <span class="text-muted">@property.Address.ZipCode @property.Address.City</span>

                        <footer class="mt-auto flex gap-2">
                            <button class="secondary" @onclick="() => NavigateToDetails(property.Id)">Détails</button>
                            <button class="contrast"  @onclick="() => PromptDelete(property.Id)">Supprimer</button>
                        </footer>
                    </section>
                </article>
            }
        </div>

        @* Pagination *@
        <nav class="mt-4 flex gap-2 justify-center">
            <button class="secondary" disabled="@(pageNumber==1)" @onclick="() => ChangePage(-1)">Précédent</button>
            <span>Page @pageNumber / @((int)Math.Ceiling(totalCount/(double)pageSize))</span>
            <button class="secondary" disabled="@(pageNumber*pageSize>=totalCount)" @onclick="() => ChangePage(1)">Suivant</button>
        </nav>
    }
</div>

@code {
    // filter state
    private decimal? minPrice;
    private decimal? maxPrice;
    private int? minBedrooms;
    private PropertyStatus? status;
    private string? locationText;
    private string? propertyType;

    private CancellationTokenSource? _debounceCts;

    private List<Property>? properties;
    private bool isBusy;
    private Guid _deleteId;
    private ConfirmDialog? confirmDeleteDlg;

    private int pageNumber = 1;
    private const int pageSize = 12;
    private int totalCount;

    protected override async Task OnInitializedAsync()
    {
        ParseQueryString();
        await LoadDataAsync();
    }

    private void ParseQueryString()//parse the query string to get the filters
    {
        var uri = Nav.ToAbsoluteUri(Nav.Uri);
        var q = System.Web.HttpUtility.ParseQueryString(uri.Query);
        if (int.TryParse(q["MinPrice"], out var mp)) minPrice = mp;
        if (int.TryParse(q["MaxPrice"], out var xp)) maxPrice = xp;
        if (int.TryParse(q["Bedrooms"], out var bd)) minBedrooms = bd;
        if (Enum.TryParse<PropertyStatus>(q["Status"], out var st)) status = st;
        locationText = q["Location"];
        propertyType = q["PropertyType"];
        if (int.TryParse(q["PageNumber"], out var pn) && pn>0) pageNumber = pn;
    }

    private void OnFilterChanged()
    {
        _debounceCts?.Cancel();
        _debounceCts = new CancellationTokenSource();
        var token = _debounceCts.Token;
        _ = Task.Delay(500, token).ContinueWith(async t =>
        {
            if (!t.IsCanceled)
            {
                await InvokeAsync(async () => await LoadDataAsync());
            }
        });
        UpdateUrl();
    }

    private void UpdateUrl()//update the url with the filters
    {
        var qs = new List<string>();
        if (minPrice.HasValue) qs.Add($"MinPrice={minPrice}");
        if (maxPrice.HasValue) qs.Add($"MaxPrice={maxPrice}");
        if (minBedrooms.HasValue) qs.Add($"Bedrooms={minBedrooms}");
        if (status.HasValue) qs.Add($"Status={status}");
        if (!string.IsNullOrWhiteSpace(locationText)) qs.Add($"Location={Uri.EscapeDataString(locationText!)}");
        if (!string.IsNullOrWhiteSpace(propertyType)) qs.Add($"PropertyType={Uri.EscapeDataString(propertyType!)}");
        if (pageNumber>1) qs.Add($"PageNumber={pageNumber}");
        qs.Add($"PageSize={pageSize}");
        var newUri = "/properties" + (qs.Count>0?"?"+string.Join("&",qs):"");
        Nav.NavigateTo(newUri, replace:true);
    }

    private async Task LoadDataAsync()//load the data from the api
    {
        try
        {
            isBusy = true;
            var queryString = new List<string>();
            if (minPrice.HasValue) queryString.Add($"MinPrice={minPrice}");
            if (maxPrice.HasValue) queryString.Add($"MaxPrice={maxPrice}");
            if (minBedrooms.HasValue) queryString.Add($"Bedrooms={minBedrooms}");
            if (status.HasValue) queryString.Add($"Status={status}");
            if (!string.IsNullOrWhiteSpace(locationText)) queryString.Add($"Location={Uri.EscapeDataString(locationText!)}");
            if (!string.IsNullOrWhiteSpace(propertyType)) queryString.Add($"PropertyType={Uri.EscapeDataString(propertyType!)}");
            queryString.Add($"PageNumber={pageNumber}");
            queryString.Add($"PageSize={pageSize}");

            var endpoint = "property" + (queryString.Count>0?"?"+string.Join("&",queryString):"");
            var response = await Http.GetFromJsonAsync<PropertyListResponse>(endpoint);
            properties = response?.Properties ?? new List<Property>();
            totalCount = response?.TotalCount ?? 0;
        }
        catch(Exception ex)
        {
            Toast.ShowError($"Erreur chargement: {ex.Message}");
        }
        finally
        {
            isBusy = false;
        }
    }

    private void NavigateToDetails(Guid id)
    {
        Nav.NavigateTo($"/properties/{id}");
    }

    private void PromptDelete(Guid id)
    {
        _deleteId = id;
        confirmDeleteDlg?.Show();
    }

    private async Task OnDeleteConfirmed(bool confirmed)
    {
        if (!confirmed) return;

        try
        {
            isBusy = true;
            await Http.DeleteAsync($"property/{_deleteId}");
            properties?.RemoveAll(p => p.Id == _deleteId);
            Toast.ShowSuccess("Bien supprimé");
        }
        catch(Exception ex)
        {
            Toast.ShowError($"Erreur suppression: {ex.Message}");
        }
        finally
        {
            isBusy = false;
        }
    }

    private static string? GetMainPhoto(Property prop)
    {
        return prop.Photos?.FirstOrDefault(p => p.IsMain)?.Url ?? prop.Photos?.FirstOrDefault()?.Url;
    }

    private async Task ChangePage(int delta)
    {
        var newPage = pageNumber + delta;
        if (newPage < 1) return;
        pageNumber = newPage;
        UpdateUrl();
        await LoadDataAsync();
    }
} 