@page "/properties/{Id:guid}"

@using Immotech.Front.Models
@using Blazored.Toast.Services
@using Immotech.Front.Components
@inject HttpClient Http
@inject IToastService Toast
@inject NavigationManager Nav

@* Detailed view of a single property *@
<LoadingOverlay IsLoading="@isBusy" />

<div class="container mx-auto">
    @if (isBusy && detail is null)
    {
        <!-- overlay handles spinner -->
    }
    else if (detail is null)
    {
        <p>Bien introuvable.</p>
    }
    else
    {
        <article class="space-y-4">
            <header class="flex justify-between items-center">
                <h2>@detail.Title</h2>
                @if (!string.IsNullOrWhiteSpace(detail.Agency?.LogoUrl))
                {
                    <img src="@detail.Agency!.LogoUrl" class="h-10" />
                }
            </header>

            @if(detail.Photos?.Any() == true)
            {
                <img src="@(GetMainPhoto(detail) ?? detail.Photos.First().Url)" class="w-full max-h-[400px] object-cover rounded" />
            }

            <section>
                <h3>Description</h3>
                <p>@detail.Description</p>
            </section>
            <section class="flex gap-8 flex-wrap">
                <div><strong>Adresse:</strong> @detail.Address.Street, @detail.Address.ZipCode @detail.Address.City</div>
                <div><strong>Localité:</strong> @detail.Location</div>
                <div><strong>Prix:</strong> @detail.Price.ToString("C0")</div>
                <div><strong>Status:</strong> @detail.Status</div>
                <div><strong>Date création:</strong> @detail.CreatedDate.ToLocalTime().ToString("d")</div>
                <div><strong>Type:</strong> @detail.Type</div>
                <div><strong>Offre:</strong> @((detail.BidType==PropertyBidType.Sale?"Vente":"Location"))</div>
                <div><strong>Chambres:</strong> @detail.Bedrooms</div>
                <div><strong>Surface:</strong> @detail.SurfaceArea m²</div>
            </section>
            @if(detail.Photos?.Count > 1)
            {
                <h3>Galerie</h3>
                <div class="grid" style="grid-template-columns: repeat(auto-fill,minmax(200px,1fr));gap:1rem;">
                    @foreach(var p in detail.Photos.Skip(1))
                    {
                        <img src="@p.Url" class="w-full aspect-video object-cover rounded" />
                    }
                </div>
            }
            <footer class="mt-4">
                <button class="secondary" @onclick="Back">Retour</button>
            </footer>
        </article>
    }
</div>

@code {
    [Parameter] public Guid Id { get; set; }

    private PropertyDetail? detail;
    private bool isBusy;

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        try
        {
            isBusy = true;
            detail = await Http.GetFromJsonAsync<PropertyDetail>($"property/{Id}");
        }
        catch(Exception ex)
        {
            Toast.ShowError($"Erreur chargement: {ex.Message}");
        }
        finally
        {
            isBusy = false;
        }
    }

    private static string? GetMainPhoto(PropertyDetail p) => p.Photos?.FirstOrDefault(ph => ph.IsMain)?.Url;

    private void Back() => Nav.NavigateTo("/properties");
} 