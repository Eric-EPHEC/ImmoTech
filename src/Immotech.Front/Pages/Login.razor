@page "/login"

@using Blazored.Toast.Services
@using System.Net.Http.Json
@using Immotech.Front.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager Nav
@inject AuthenticationStateProvider Auth
@inject IToastService Toast

<div class="container mx-auto flex flex-col items-center">
    <h1>Connexion</h1>
    <p>Entrez vos identifiants pour accéder à votre compte.</p>

    <div class="grid" style="max-width:400px">
        <label>Email
            <input @bind="email" type="email" placeholder="exemple@email.com" />
        </label>

        <label>Mot de passe
            <input @bind="password" type="password" />
        </label>

        <button class="contrast" @onclick="HandleLogin" disabled="@isBusy">
            @(isBusy ? "Connexion en cours..." : "Se connecter")
        </button>
    </div>

    <p class="mt-2">Pas encore de compte ? <a href="/register">Créer un compte</a></p>

    <hr class="w-full my-4"/>
    <h5>Ou se connecter avec</h5>
    <div class="grid" style="max-width:400px">
        <!-- Social provider links call API endpoints -->
        <a class="contrast" href="https://localhost:7261/auth/external/google">Google</a>
        <a class="contrast" href="https://localhost:7261/auth/external/microsoft">Microsoft</a>
        <a class="contrast" href="https://localhost:7261/auth/external/facebook">Facebook</a>
    </div>
</div>

@code {
    private string email = string.Empty;
    private string password = string.Empty;
    private bool isBusy;

    // This method handles the login process when the user clicks the button.
    private async Task HandleLogin()
    {
        isBusy = true;

        try
        {
            // We create the request payload for the API.
            var request = new { Email = email, Password = password };
            var response = await ((TokenAuthenticationStateProvider)Auth).LoginAsync(email, password);

            if (response.Succeeded)
            {
                // If the login is successful, we read the token from the response.
                if (response.Token is not null)
                {
                    Toast.ShowSuccess("Connecté");
                    Nav.NavigateTo("/");
                }
            }
            else
            {
                // If the API returns an error, we display it to the user.
                Toast.ShowError(string.Join(", ", response.ErrorList));
            }
        }
        catch (Exception ex)
        {
            Toast.ShowError($"Une erreur est survenue: {ex.Message}");
        }
        finally
        {
            isBusy = false;
        }
    }
} 