@page "/agencies"

@using Immotech.Front.Models
@using Blazored.Toast.Services
@inject HttpClient Http
@inject IToastService Toast
@inject NavigationManager Nav

@* Agencies list *@
<h2>Agences</h2>
<input placeholder="Rechercher" style="margin-bottom:0.5rem;" @bind="search" @bind:event="oninput" />

<LoadingOverlay IsLoading="isBusy" />

@if(isBusy && agencies is null)
{
    <!-- overlay -->
}
else if(agencies is null || !agencies.Any())
{
    <p>Aucune agence trouv√©e</p>
}
else
{
    <div style="display:flex;flex-direction:column;gap:1rem;">
        @foreach(var a in agencies)
        {
            <article class="prop-row">
                @if (!string.IsNullOrWhiteSpace(a.LogoUrl))
                {
                    <img src="@a.LogoUrl" style="width:80px;height:80px;object-fit:contain;border-radius:4px;" />
                }
                <section style="flex:1;display:flex;flex-direction:column;gap:0.25rem;">
                    <strong>@a.Name</strong>
                    <span class="text-muted">@a.ContactEmail</span>
                    @if(a.Address is not null)
                    {
                        <span>@a.Address.Street @a.Address.City</span>
                    }
                    <footer style="margin-top:auto;display:flex;gap:0.5rem;">
                        <button class="secondary" @onclick="@(() => Nav.NavigateTo($"/agencies/{a.Id}/edit"))">Modifier</button>
                    </footer>
                </section>
            </article>
        }
    </div>
}

@code {
    private string? search;
    private List<Agency>? agencies;
    private bool isBusy;

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        try
        {
            isBusy = true;
            var endpoint = string.IsNullOrWhiteSpace(search)?"agency":$"agency?SearchTerm={Uri.EscapeDataString(search!)}";
            var response = await Http.GetFromJsonAsync<AgencyListResponse>(endpoint);
            agencies = response?.Agencies ?? [];
        }
        catch(Exception ex)
        {
            Toast.ShowError(ex.Message);
        }
        finally { isBusy = false; }
    }

    private async Task OnSearch(ChangeEventArgs e)
    {
        search = e.Value?.ToString();
        await LoadAsync();
    }
} 