@page "/agencies"

@using Immotech.Front.Models
@using Blazored.Toast.Services
@inject HttpClient Http
@inject IToastService Toast
@inject NavigationManager Nav

@* Agencies list *@
<div class="container mx-auto">
    <h2 class="mb-2">Agences</h2>
    <input placeholder="Rechercher" style="margin-bottom:0.5rem;" value="@search" @oninput="OnSearchInput" />

    <LoadingOverlay IsLoading="isBusy" />

    @if(isBusy && agencies is null)
    {
        <!-- overlay -->
    }
    else if(agencies is null || !agencies.Any())
    {
        <p>Aucune agence trouv√©e</p>
    }
    else
    {
        <div class="flex flex-col gap-4">
            @foreach(var a in agencies)
            {
                <article class="prop-row flex items-center gap-4">
                    @if (!string.IsNullOrWhiteSpace(a.LogoUrl))
                    {
                        <img src="@a.LogoUrl" style="width:80px;height:80px;object-fit:contain;border-radius:4px;" />
                    }
                    <section class="flex-1 flex flex-col gap-1">
                        <strong>@a.Name</strong>
                        <span class="text-muted">@a.ContactEmail</span>
                        @if(a.Address is not null)
                        {
                            <span>@a.Address.Street @a.Address.City</span>
                        }
                        <footer class="mt-auto flex gap-2">
                            <button class="secondary" @onclick="@(() => Nav.NavigateTo($"/agencies/{a.Id}/edit"))">Modifier</button>
                        </footer>
                    </section>
                </article>
            }
        </div>
    }
</div>

@code {
    private string? search;
    private List<Agency>? agencies;
    private bool isBusy;
    private CancellationTokenSource? _debounceCts;

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        try
        {
            isBusy = true;
            var endpoint = string.IsNullOrWhiteSpace(search)?"agency":$"agency?SearchTerm={Uri.EscapeDataString(search!)}";
            var response = await Http.GetFromJsonAsync<AgencyListResponse>(endpoint);
            agencies = response?.Agencies ?? [];
        }
        catch(Exception ex)
        {
            Toast.ShowError(ex.Message);
        }
        finally { isBusy = false; }
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        search = e.Value?.ToString();

        _debounceCts?.Cancel();
        _debounceCts = new CancellationTokenSource();
        var token = _debounceCts.Token;

        _ = Task.Delay(500, token).ContinueWith(async t =>
        {
            if (!t.IsCanceled)
            {
                await InvokeAsync(LoadAsync);
            }
        }, token);
    }
} 